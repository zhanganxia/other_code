正则表达式(正则表达式30分钟入门)
----------------------------------------
定义:记录文本规则的代码
python使用正则表达式.导入re模块


1.匹配单个字符
  1) . 匹配任意1个字符(除了\n)
     根据正则规则从头开始匹配字符串(re.match(参数1,参数2))
     参数1:正则表达式  参数2:要匹配的字符串

     [ ] 匹配[]中列举的字符

     \d  匹配第一位数字的字符串
         \d等价于[0-9]
     \b  匹配单词的开始或结束

     \D  匹配非数字

     \s  匹配空格(空格,tab键)

     \S匹配非空白

     \w 匹配单词字符,即a-z,A-Z,0-9,_ 还可以匹配汉字

2.匹配多个字符
    1) * 匹配前一个字符出现0次或者无限次,即可有可无
    2) + 匹配前一个字符出现1次或者无限次,即至少1次
    3) ? 匹配前一个字符出现1次或者0次
    4) {m} 匹配m次前面出现的正则表达式
    5) {m,n} 匹配m~n次前面出现的正则表达式
    6) {n,} 匹配前一个字符至少出现n次
    7) {^..} 不匹配此字符集中出现的任何一个字符,包括某一范围的字符

3.匹配开始和结尾
    1) ^ 匹配字符串开头
        以数字开头: "^\d"
        除了4,7以外的字符都匹配: [^47]

    2) $ 匹配字符串结尾

    作业:1.匹配163邮箱 @前面有4-20 位字符
    \w{4,20}[@163.]

4.匹配分组
    1) | 匹配左右任意一个表达式
    2) (ab) 将括号中字符做为一个分组
    3) \num 引用分组num匹配到的字符串
    4) (?P<name>)  分组起别名
    5) (?P=name) 引用别名为name分组匹配到的字符串

5.re的高级用法
    1)查找指定数据: re.search()
    2)查找多个,返回列表: re.findall()
    3)替换: re.sub("参数1","参数2","参数3")
        参数1:正则表达式
        参数2:替换内容
        参数3:要匹配的字符串
    4)正则的分割: re.split()


6. r 表示原生字符串,反斜杠"\"不需要再转义

