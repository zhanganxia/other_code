第一步  将接收到的消息封装到字典里面
--------------------------------------------------
#处理机接收到的消息
1.分析接收到的信息
    版本号（版本信息和用户头像）-->version
    包编号  -->packageid
    用户名  -->username
    主机名  -->hostname
    命令字  -->commond_num
    命令字对应的消息内容  -->content
2.提取冒号之前的数据-->split(":")-->切5次-->返回一个列表
                        -->将列表数据封装到字典(创建一个空的字典，逐个append)
    handle_resv_data()
    返回字典信息
3.在recv_msg函数中：将处理接收的数据封装到字典里面
    recv_info_dict = handle_resv_data(recv_data)

4.运行测试


第二步  提取命令及命令选项
------------------------------------------------------------
我们需要知道这个消息的类型（上线消息、下线消息）
飞鸽命令列表
    命令-->前面6位不变，后面两位改变
    选项-->前面6位改变，后面两位不变
    命令字包含命令和命令选项

1.提取数据（命令字）-->通过按位与方式提取
    def handle_commond_num(commond_num)
    将命令字转成整型


第三步   通过命令区分消息
--------------------------------------------------------
通报在线命令 -->feigeglobal

commond == 1 -->上线
commond == 2 -->下线
commond == 3 -->对方通报在线
commond == 20 -->发送消息
commond == 21 -->告知对方收到消息

绑定端口号-->程序发送消息的端口号不固定，下线广播只发送给端口为：2425的端口


第四步  抽取上线回复及告知对方收到消息的函数
----------------------------------------------------------
1.上线之后未告知其他用户我上线了。。。
    在feigerecv模块中添加“回复对方我也在线”

2.收到消息之后未回复我收到了，对方会一直发。。。
    在feigerecv模块中添加“告知对方收到消息”

抽取发送内容

第五步  保存用户信息到列表
------------------------------------------------------------
1.创建保存用户信息列表全局变量
2.在用户上线函数、用户是否在线函数中创建空字典，用来保存上线的用户名和用户ip
3.将接收的字典信息追加到在线用户列表中
4.添加"显示在线用户列表信息功能"  -->添加菜单
    在main方法中添加函数：show_online_list()

    python -->enumerate(可以取到值和下标)
5.抽取：保存用户信息列表函数：handle_save_online_user_info()
    1.将公共模块抽取
    2.添加判断：当前用户的用户名和ip是否在列表中已存在，如果存在跳出循环，否则
        添加
6.把下线的用户信息从列表中移除（根据用户ip去删除）
    删除下线用户信息 remove_offline_user_info

7.给指定的用户发信息（通过序号查找用户）
    在给对方ip发送消息模块添加：显示用户在线信息，提示用户输入序号
    用户序号：50 输入：60 需要捕获异常






