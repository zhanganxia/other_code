1.使用for循环迭代的对象：列表，字符串、元组，字典、集合、range

2.迭代：使用for循环遍历的过程就叫迭代

3.可迭代对象：能够使用for循环遍历取值的对象。
  注意：整型、类不可迭代

4.判断是否可以迭代:collections 模块中 Iterable类

5.迭代器
  在类里面定义__iter__和__next__的这两个方法表示就是迭代器，
  迭代器就是记录当前遍历位置及获取下一个位置的值
6.Iterator  -->迭代器
  Iterable  -->迭代对象

7.iter()和next()函数
  iter() -->获取可迭代对象的迭代器
  next() -->获取迭代器中的下一个值

  迭代器可以使用for循环直接遍历取值

8.for循环的本质：
	首先通过iter()函数获取可迭代对象的迭代器，
	然后对获取到的迭代器不断调用next()方法来获取
	下一个值并将其赋值给item,当遇到StopIteration
	的异常后循环结束

 提示：for内部自己处理停止迭代的异常



9.生成器
  1）使用yield关键字：遇到yield代码先把值返回然后暂停执行，
  再次启动生成器的时候代码在暂停位置继续向下执行

  2）生成器中使用return


10.协程
  协程又称为微线程，可以理解成比线程更小的执行单元，也可
称为用户基线程，协程的执行顺序可以有程序员控制
  


提示：在不开辟线程的基础上，完成多任务可以使用协程，完成多任务交替执行
    


11.
协程使用资源最少
创建一个协程4-5k
创建一个线程512k - 1M
创建一个进程，分配的资源更多

协程主要使用场景：比如网络请求、网络爬虫

12.greenlet的使用
安装：greenlet  对协程进行封装，手动切换到不同协程执行任务



13.gevent的使用
	gevent安装：pip3 install gevent
	gevent是封装的是greenlet，根据耗时操作自动进行协程间切换执行

	创建协程：g1 = gevent.spawn(函数名)

	gevent不认为 time.sleep() 是耗时的，gevent.sleep()

gevent打补丁后，gevent就可以认为time.sleep（）为耗时






























