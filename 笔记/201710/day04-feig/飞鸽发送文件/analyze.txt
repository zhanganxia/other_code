第一步  以udp发送文件消息提醒
--------------------------------------------------




第二步  创建tcp服务端
--------------------------------------------------




第三步  创建子进程启动tcp服务端
----------------------------------------------------



第四步  获取文件的修改时间和文件大小
---------------------------------------------------
1.修改文件信息内容(feigesend模块中格式化文件大小和文件修改时间)
  1）获取文件大小
     os.path.getsize(文件名)
  2）获取文件的修改时间(需转换成int类型)
     os.path.getctime(文件名)
  3）文件大小和修改时间均要格式化输出为16进制传给飞秋

第五步  使用消息队列完成发送文件信息传递到tcp子进程
--------------------------------------------------------
1.将文件包编号，文件序号，文件名封装到字典
   1）消息包编号来源于buid_msg中的时间戳，函数和函数之前需要共用一个变量
      可将此变量设置为全局变量：packgeid
   2) 文件序号：fileindex
   3) 创建消息队列：设置file_queue全局变量，并在main方法启动时创建消息队列
2.把发送文件的信息（send_file_dict）放入消息队列
   主进程向队列写数据，子进程读取数据，queue在子进程创建的时候就以参数的形式
   传给子进程
3.子进程读取消息队列的消息：queue.get()
   1）创建子线程来获取队列的消息，从而不会影响到tcp服务端socket的创建
   2）定义函数：recv_queue_data 接收文件队列的消息


第六步  发送文件保存到文件列表
---------------------------------------------------------------
创建列表记录发送文件列表信息：send_file_list
将从queue中获取的文件的字典信息追加到列表中


第七步  处理飞秋请求的文件信息
----------------------------------------------------------------
1.在读取客户端的请求信息时
  使用feigerecv模块的handle_recv_data处理接收到的数据recv_data,使用
  recv_info_dict接收
2.获取飞秋请求的文件信息
  recv_file_dict["content"]使用request_recv_file_dict接收
3.处理飞秋请求的文件信息
   1）使用“：”进行分割，并使用列表存储
   2）使用字典将列表封装
   3）在函数handle_recv_file_dict中返回recv_file_dice
4.在读取客户端请求信息的函数中输出


第八步  根据飞秋的请求信息遍历列表
---------------------------------------------------------------
1.根据飞秋的请求信息遍历文件发送列表查找对方想要的文件
  遍历发送文件列表信息然后根据飞秋请求文件信息(packageid和fileindex)获取文件名(filename)
2.打开文件，把二进制数据读取出来
  
  





    







